#!/usr/bin/env bash

VERSION=0.1.0

function main() {

  # Parse output
  for arg in $@; do
    shift
    case "$arg" in
      -d|--dir)
        OPT_DIR=$1
      ;; 
      -t|--tag)
        OPT_TAG=$1
      ;;
      -e|--exec)
        OPT_EXEC=$*
      ;;
      -v|--verbose)
        OPT_VERBOSE=true
      ;;
      -r|--rails)
        OPT_RAILS=$1
      ;;
      run|shell|rails|irb|project|help|update|uninstall)
        COMMAND=$arg
      ;;
      *)
    esac
  done
  
  # Set default values
  [[ -z "$OPT_DIR" ]] && OPT_DIR=$PWD
  [[ -z "$OPT_TAG" ]] && OPT_TAG="alpine"
  [[ -z "$COMMAND" ]] && COMMAND="help"
  
  
  # Debug
  if [[ $OPT_VERBOSE ]]; then
    echo "DEBUG: dir: ${OPT_DIR} | tag: ${OPT_TAG} | exec: ${OPT_EXEC} | command: ${COMMAND}"
  fi
  
  # Execute commands
  case $COMMAND in
    shell|run)
      cmd_shell
    ;;
    irb)
      cmd_irb
    ;;
    rails)
      cmd_rails
    ;;
    project)
      cmd_project
    ;;
    update)
      cmd_update
    ;;
    uninstall)
      cmd_uninstall
    ;;
    *)
      cmd_help
    ;;
  esac

}

function chown_dir {
  DOCKER_USER_ID=$(id -u)
  DOCKER_GROUP_ID=$(id -g)
  OPT_CHOWN=1
  run_in_docker "sh -c 'chown -R ${DOCKER_USER_ID}:${DOCKER_GROUP_ID} /usr/src'"
}

function cmd_help {
  echo "dru $VERSION"
  echo
  echo "COMMANDS:"
  echo "dru shell     Runs sh from a ruby conainer"
  echo "dru irb       Runs irb from a ruby conainer"
  echo "dru rails     Runs rails command in the container"
  echo "dru project   Generate Dockerfile and docker-compose.yml files"
  echo "dru update    Updates dru to the latest stable release"
  echo "dru uninstall Removes dru from your machine"
  echo
  echo "OPTIONS:"
  echo "-d or --dir   Mount directory (default: current directory)"
  echo "-t or --tag   Tag of ruby image (default: alpine)"
  echo "-e or --exec  Execute a custom command in the container"
}

function cmd_irb {
  tag_info
  run_in_docker "irb"
}

function cmd_project {
  create_dockerfile
  create_docker_compose
  replace_database_yml
}

function cmd_rails {
  tag_info
  [[ -z "$OPT_EXEC" ]] && OPT_EXEC="--help"
  [[ -n "$OPT_RAILS" ]] && RAILS_VERSION="-v $OPT_RAILS"
  SUSPEND_LOG=$([[ -z $OPT_VERBOSE ]] && echo "1>/dev/null")
  DOCKER_COMMAND="apk add --update build-base postgresql-dev sqlite-dev mariadb-dev \
                                   nodejs tzdata $SUSPEND_LOG && \
                  gem install rails $RAILS_VERSION $SUSPEND_LOG && rails ${OPT_EXEC}"
  run_in_docker "sh -c '$DOCKER_COMMAND'"
}

function cmd_shell {
  tag_info
  run_in_docker "sh"
}

function cmd_uninstall {
  sudo sh -c 'rm -rf /usr/bin/dru'
}

function cmd_update {
  curl -s https://raw.githubusercontent.com/zinovyev/dru/master/dru | sudo sh -c 'cat > /usr/bin/dru && chmod +x /usr/bin/dru'
}

function empty_mounted_directory() {
  if [[ -d $OPT_DIR ]]; then
    run_in_docker "rm -rf /usr/src/*"
    sleep 1
  fi
}

function run_in_docker {
  DOCKER_COMMAND=$1
  FULL_COMMAND="docker run --rm -v \"${OPT_DIR}:/usr/src\" -v \"dru1-bundle:/usr/local/bundle\" \
                                -v \"dru1-gem:/root/.gem\" -v \"dru1-apk:/var/cache/apk\" \
                                -w /usr/src -ti ruby:${OPT_TAG} $DOCKER_COMMAND"
  [[ $OPT_VERBOSE ]] && echo $FULL_COMMAND
  eval $FULL_COMMAND
  [[ -z $OPT_CHOWN ]] && chown_dir
}

function tag_info {
  if [[ $OPT_VERBOSE ]]; then
    echo -n "The '${OPT_TAG}' tag will be used for the image. "
    echo -n "To see all possible tags please visit the https://hub.docker.com/_/ruby?tab=tags"
    echo -e "\n"
  fi
}

main $@
