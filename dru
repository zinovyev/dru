#!/usr/bin/env bash

VERSION=0.1.0

function main() {

  # Parse output
  for arg in $@; do
    shift
    case "$arg" in
      -d|--dir)
        OPT_DIR=$1
      ;; 
      -t|--tag)
        OPT_TAG=$1
      ;;
      -e|--exec)
        OPT_EXEC=$*
      ;;
      -v|--verbose)
        OPT_VERBOSE=true
      ;;
      -r|--rails)
        OPT_RAILS=$1
      ;;
      run|rails|irb|project|help|update|uninstall)
        COMMAND=$arg
      ;;
      *)
    esac
  done
  
  # Set default values
  [[ -z "$OPT_DIR" ]] && OPT_DIR=$PWD
  [[ -z "$OPT_TAG" ]] && OPT_TAG="alpine"
  [[ -z "$COMMAND" ]] && COMMAND="help"
  
  
  # Debug
  if [[ $OPT_VERBOSE ]]; then
    echo "DEBUG: dir: ${OPT_DIR} | tag: ${OPT_TAG} | exec: ${OPT_EXEC} | command: ${COMMAND}"
  fi
  
  # Execute commands
  case $COMMAND in
    run)
      cmd_run
    ;;
    irb)
      cmd_irb
    ;;
    rails)
      cmd_rails
    ;;
    project)
      cmd_project
    ;;
    update)
      cmd_update
    ;;
    uninstall)
      cmd_uninstall
    ;;
    *)
      cmd_help
    ;;
  esac

}

function chown_dir {
  DOCKER_USER_ID=$(id -u)
  DOCKER_GROUP_ID=$(id -g)
  OPT_CHOWN=1
  run_in_docker "sh -c 'chown -R ${DOCKER_USER_ID}:${DOCKER_GROUP_ID} /usr/src'"
}

function cmd_help {
  echo "dru $VERSION"
  echo
  echo "COMMANDS:"
  echo "dru run       Runs sh in ruby conainer"
  echo "dru irb       Runs irb in ruby conainer"
  echo "dru rails     Runs rails command in the container"
  echo "dru project   Generate Dockerfile and docker-compose.yml files"
  echo "dru update    Updates dru to the latest stable release"
  echo "dru uninstall Removes dru from your machine"
  echo
  echo "OPTIONS:"
  echo "-d or --dir   Mount directory (default: current directory)"
  echo "-t or --tag   Tag of ruby image (default: alpine)"
  echo "-e or --exec  Execute a custom command in the container"
}

function cmd_irb {
  tag_info
  run_in_docker "irb"
}

function cmd_project {
  # Add Dockerfile
  FULL_COMMAND="docker run --rm -v ${OPT_DIR}:/usr/src -v dru1-bundle:/usr/local/bundle -v dru1-gem:/root/.gem \
                           -v dru1-apk:/var/cache/apk -w /usr/src -ti ruby:${OPT_TAG} $DOCKER_COMMAND"

  DOCKER_FILE="${OPT_DIR}/Dockerfile"
  cat >$DOCKER_FILE <<EOL
FROM ruby:$OPT_TAG
ENV APP_PATH="/usr/src"
ENV RAILS_PORT=3000

RUN apk add --update build-base postgresql-dev sqlite-dev mariadb-dev nodejs tzdata 1>/dev/null
RUN mkdir -p \$APP_PATH
WORKDIR \$APP_PATH
COPY Gemfile \$APP_PATH/Gemfile
COPY Gemfile.lock \$APP_PATH/Gemfile.lock
RUN bundle install
COPY . \$APP_PATH

EXPOSE \$RAILS_PORT

CMD ["rails", "server", "-b", "0.0.0.0"]
EOL

  # Add docker-compose.yml
  DOCKER_COMPOSE_FILE="${OPT_DIR}/docker-compose.yml"
  cat >$DOCKER_COMPOSE_FILE <<EOL
version: '3'
services:
  db:
    image: postgres
    volumes:
      - ./tmp/db:/var/lib/postgresql/data
  web:
    build: .
    command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails s -p 3000 -b '0.0.0.0'"
    volumes:
      - .:/usr/src
      - dru1-bundle:/usr/local/bundle
      - dru1-gem:/root/.gem
      - dru1-apk:/var/cache/apk
    ports:
      - "3000:3000"
    depends_on:
      - db
volumes:
  dru1-bundle:
  dru1-gem:
  dru1-apk:
EOL
}

function cmd_rails {
  tag_info
  [[ -z "$OPT_EXEC" ]] && OPT_EXEC="--help"
  [[ -n "$OPT_RAILS" ]] && RAILS_VERSION="-v $OPT_RAILS"
  SUSPEND_LOG=$([[ -z $OPT_VERBOSE ]] && echo "1>/dev/null")
  DOCKER_COMMAND="apk add --update build-base postgresql-dev sqlite-dev mariadb-dev \
                                   nodejs tzdata $SUSPEND_LOG && \
                  gem install rails $RAILS_VERSION $SUSPEND_LOG && rails ${OPT_EXEC}"
  run_in_docker "sh -c '$DOCKER_COMMAND'"
}

function cmd_run {
  tag_info
  run_in_docker "sh"
}

function cmd_uninstall {
  sudo sh -c 'rm -rf /usr/bin/dru'
}

function cmd_update {
  curl -s https://raw.githubusercontent.com/zinovyev/dru/master/dru | sudo sh -c 'cat > /usr/bin/dru && chmod +x /usr/bin/dru'
}

function empty_mounted_directory() {
  if [[ -d $OPT_DIR ]]; then
    rm -rf $OPT_DIR
    # run_in_docker "rm -rf /usr/src/*"
    # sleep 1
  fi
}

function run_in_docker {
  DOCKER_COMMAND=$1
  FULL_COMMAND="docker run --rm -v \"${OPT_DIR}:/usr/src\" -v \"dru1-bundle:/usr/local/bundle\" \
                                -v \"dru1-gem:/root/.gem\" -v \"dru1-apk:/var/cache/apk\" \
                                -w /usr/src -ti ruby:${OPT_TAG} $DOCKER_COMMAND"
  [[ $OPT_VERBOSE ]] && echo $FULL_COMMAND
  eval $FULL_COMMAND
  [[ -z $OPT_CHOWN ]] && chown_dir
}

function tag_info {
  if [[ $OPT_VERBOSE ]]; then
    echo -n "The '${OPT_TAG}' tag will be used for the image. "
    echo -n "To see all possible tags please visit the https://hub.docker.com/_/ruby?tab=tags"
    echo -e "\n"
  fi
}

main $@
